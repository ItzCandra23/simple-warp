"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actor_1 = require("bdsx/bds/actor");
const blockpos_1 = require("bdsx/bds/blockpos");
const command_1 = require("bdsx/bds/command");
const command_2 = require("bdsx/command");
const nativetype_1 = require("bdsx/nativetype");
const form_1 = require("./form");
const __1 = require("..");
const _1 = require(".");
//warp command
command_2.command.register(`warp`, `Warps to a defined warp.`)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null)
        return;
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    pl.sendMessage(`ยง6Warps: ยง7${__1.SimpleWarp.getWarps()}`);
}, {})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null)
        return;
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.teleport(pl, p.warp);
}, {
    warp: nativetype_1.CxxString,
});
//warp ui command
command_2.command.register(`warpui`, `Open the warps ui.`)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null)
        return;
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    form_1.SimpleWarpUI.warps(pl);
}, {});
//create new warp command
command_2.command.register(`addwarp`, `Create a warp.`, command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null)
        return;
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.addWarp(p.name, pl.getPosition(), pl.getDimensionId(), pl);
}, {
    name: nativetype_1.CxxString,
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.addWarp(p.name, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), actor_1.DimensionId.Overworld);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.addWarp(p.name, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), pl.getDimensionId(), pl);
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.addWarp(p.name, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), p.dimensionId);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.addWarp(p.name, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), p.dimensionId, pl);
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimensionId: command_2.command.enum("DimensionId", actor_1.DimensionId),
});
//remove warp command
command_2.command.register(`removewarp`, `Remove a warp.`, command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.removeWarp(p.warp);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.removeWarp(p.warp, pl);
}, {
    warp: nativetype_1.CxxString,
});
//edite warp command
command_2.command.register(`editwarp`, `Edit a warp position and dimension.`, command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null)
        return;
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.editWarp(p.warp, pl.getPosition(), pl.getDimensionId(), pl);
}, {
    warp: nativetype_1.CxxString,
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.editWarp(p.warp, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), actor_1.DimensionId.Overworld);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.editWarp(p.warp, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), pl.getDimensionId(), pl);
}, {
    warp: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.editWarp(p.warp, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), p.dimensionId);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.editWarp(p.warp, blockpos_1.Vec3.create(p.pos.x, p.pos.y, p.pos.z), p.dimensionId, pl);
}, {
    warp: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimensionId: command_2.command.enum("DimensionId", actor_1.DimensionId),
});
command_2.command.register("warptimeout", "Set warp timeout.", command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        _1.WarpConfig.setWarpTimeout(p.seconds);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    _1.WarpConfig.setWarpTimeout(p.seconds);
}, {
    seconds: nativetype_1.int32_t,
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        _1.WarpConfig.setWarpTimeout(undefined);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    _1.WarpConfig.setWarpTimeout(undefined);
}, {
    disable: command_2.command.enum("WarpTimeoutDisable", "disable"),
});
//Save
command_2.command.register("warpsave", "Save a simple-warp plugin.", command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        __1.SimpleWarp.save(true);
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    __1.SimpleWarp.save(true, pl);
}, {})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        if (p.config === "warps")
            __1.SimpleWarp.save(true);
        if (p.config === "config")
            _1.WarpConfig.save(true);
        if (p.config === "all") {
            __1.SimpleWarp.save(true);
            _1.WarpConfig.save(true);
        }
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    if (p.config === "warps")
        __1.SimpleWarp.save(true, pl);
    if (p.config === "config")
        _1.WarpConfig.save(true, pl);
    if (p.config === "all") {
        __1.SimpleWarp.save(true, pl);
        _1.WarpConfig.save(true, pl);
    }
}, {
    config: command_2.command.enum("WarpSaveSelector", "config", "warps", "all"),
})
    .overload((p, o) => {
    const entity = o.getEntity();
    if (entity === null) {
        if (p.config === "warps")
            __1.SimpleWarp.save(p.sendMessage);
        if (p.config === "config")
            _1.WarpConfig.save(p.sendMessage);
        if (p.config === "all") {
            __1.SimpleWarp.save(p.sendMessage);
            _1.WarpConfig.save(p.sendMessage);
        }
        return;
    }
    const pl = entity.getNetworkIdentifier().getActor();
    if (pl === null)
        return;
    if (p.config === "warps")
        __1.SimpleWarp.save(p.sendMessage, pl);
    if (p.config === "config")
        _1.WarpConfig.save(p.sendMessage, pl);
    if (p.config === "all") {
        __1.SimpleWarp.save(p.sendMessage, pl);
        _1.WarpConfig.save(p.sendMessage, pl);
    }
}, {
    config: command_2.command.enum("WarpSaveSelector", "config", "warps", "all"),
    sendMessage: nativetype_1.bool_t,
});
//# sourceMappingURL=data:application/json;base64,